openapi: "3.0.3"
info:
  title: A7 Analytics Platform - Dataset API (version 2)
  description: |
    A7 Analytics Platform for the main T7 trading venues of Deutsche Börse Group.
    The platform enables clients to perform pre/at/post trade analysis and to interact with market data and analytics.It provides clients access to the most granular un-normalized/genuine historical order book data (EOBI) as well as constructed order books, off-the-shelf analytics and allows them to build their own custom analytics utilizing algo functionality, which is a flexible high-performance framework based on historical order book data (EOBI) across all T7 exchanges (Eurex, Xetra, etc.).</br></br>
    The A7 data can be accessed either via the <a href="https://a7.deutsche-boerse.com/">user interface</a> or via RESTful API.</br></br>
    The <b>dataset API (version 2)</b> provides read-only access to pre-defined historical datasets. All available endpoints are described in detail below.<br/><br/>
    <b>Security measures:</b></br>
    In order to prevent unauthorized access to the API an authentication token must be used. A7 utilises the bearer authentication scheme for this purpose. The authentication token must be added to the header of each request message. Depending on the implementation it might be necessary to add the keyword "Bearer" to the token string as a prefix followed by a space.</br></br>
    A token can be generated at the <a href="https://a7.deutsche-boerse.com/">A7 user interface</a>. After login the user has to click on the user icon in the upper right corner, click on <b>API token generation</b> and finally click on <b>Request API key</b>. The generated token will be displayed directly in the user interface.<br/><br/>

  contact:
    name: Deutsche Börse Data & Analytics
    url: https://www.mds.deutsche-boerse.com
    email: analytics@deutsche-boerse.com
  version: 1.0.1
servers:
  - url: /api/v2
    description: A7 production environment

paths:
  /dataset:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve list of dataset providers"
      description: "The request delivers the list of dataset providers."
      operationId: "getProviders"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProviderList"
        "401":
          $ref: "#/components/responses/401"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /dataset/{provider}:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve list of available datasets of a single provider"
      description: "The request delivers all available datasets assigned to the given provider."
      operationId: "getAvailableDatasets"
      parameters:
        - $ref: "#/components/parameters/provider"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Datasets"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /dataset/{provider}/{dataset}:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve specification (schema) of given dataset"
      description: "The request delivers the specification of the given dataset."
      operationId: "getDatasetSpecs"
      parameters:
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/dataset"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSpecs'
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /dataset/{provider}/{dataset}/{date}:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve results of given dataset for the selected date"
      description: "The request delivers the results of the given dataset."
      operationId: "getDatasetResultsForDate"
      parameters:
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/dataset"
        - $ref: "#/components/parameters/date"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/queryParams"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /dataset/{provider}/{dataset}/data:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve result of given dataset"
      description: "The request delivers the results of the given dataset."
      operationId: "getDatasetResults"
      parameters:
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/dataset"
        - $ref: "#/components/parameters/dates"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/params"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
  /dataset/{provider}/{dataset}/query:
    post:
      tags:
        - "Dataset API"
      summary: Retrieve result of given dataset query
      description: The request queries the dataset and returns the matching results.
      operationId: queryDatasetResults
      parameters:
        - $ref: "#/components/parameters/provider"
        - $ref: "#/components/parameters/dataset"
        - $ref: "#/components/parameters/dates"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/limit"
      requestBody:
        description: Query string as SQL 'where' clause
        required: true
        content:
          text/plain:
            schema:
              type: string
            examples:
              one:
                summary: Select dataset content by ISIN pattern
                value: ISIN like 'DE%'
              two:
                summary: Select dataset content by multiple ISINs
                value: ISIN IN ('DE0005810055', 'DE0008469594', 'DE0008469495')
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
            text/csv:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
        "503":
          $ref: "#/components/responses/503"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    provider:
      name: "provider"
      in: path
      description: "Dataset provider identification"
      example: "eurex"
      required: true
      schema:
        type: string
    dataset:
      name: "dataset"
      in: path
      description: "Name of the dataset"
      example: "trades"
      required: true
      schema:
        type: string
    date:
      name: date
      in: path
      description: Date (fact date) of the data to be retrieved (as YYYYMMDD)
      example: 20220121
      required: true
      schema:
        type: string
        pattern: '^20\d{2}[01]\d[0-3]\d$'
    fields:
      name: fields
      in: query
      description: "The list of fields to be returned. (by default - wihout fields parameter -  all fields will be returned)"
      example: "ISIN,PRICE"
      required: false
      schema:
        type: string
        default: "*"
    dates:
      name: dates
      in: query
      description: "Data filter by date (default value - when omitted - refers to the latest available date); possible values: YYYYMMDD (single date), YYYYMMDD-YYYYMMDD (days between start - end date), YYYYMMDD,YYYYMMDD (comma separated list of dates). There can be some restrictions for individual datasets, thus only single date value will be accepted. Please read the dataset documentation for further details."
      example: "20211224"
      required: false
      schema:
        type: string
    format:
      name: format
      in: query
      description: "Defines the format of the response."
      schema:
        type: string
        enum: ["csv", "json"]
        default: "json"
    limit:
      name: limit
      in: query
      description: "Limit the number of elements in the response (default is 10000 if omitted). Max value is 1000000."
      example: "100"
      schema:
        type: string
        default: null
    params:
      name: params
      in: query
      description: "any additional query parameters"
      schema:
        type: object
        additionalProperties:
          type: string
      style: form
      explode: true
      example:
        Isin=DE0005810055,Price=162.0
    queryParams:
      name: params
      in: query
      description: "any additional query parameters. The mandatory fields must be set here"
      schema:
        type: object
        additionalProperties:
          type: string
      style: form
      explode: true
      example:
        Isin=DE0005810055,Price=162.0
  schemas:
    Datasets:
      properties:
        datasets:
          type: array
          items:
            $ref: '#/components/schemas/Dataset'
      example:
        datasets:
          - { "name": "trades", "description": "trade events with price, size, ...", "type": "time series" }
          - { "name": "openinterest", "description": "daily adjusted open interest qty", "type": "daily" }
          - { "name": "settlement", "description": "daily settlement prices", "type": "daily" }
          - { "name": "ohlct", "description": "daily trade statistics open/high/log/close/totel_volume", "type": "daily" }
    Dataset:
      properties:
        name:
          type: string
        info:
          type: string
        license:
          type: string
        type:
          type: string
        format:
          type: string
        firstDate:
          type: "integer"
        lastDate:
          type: "integer"
        rate:
          $ref: "#/components/schemas/DatasetRate"
    DatasetRate:
      properties:
        weight:
          type: "integer"
        limit:
          type: "integer"
    FieldSpec:
      properties:
        name:
          type: string
        type:
          type: string
        info:
          type: string
        presence:
          type: string
        query:
          type: string
      example:
        name: "Market"
        type: "String"
        info: "Market information"
        presence: "mandatory"
        query: "mandatory"
    FieldSpecValid:
      properties:
        valid_from:
          type: string
        valid_to:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
    DatasetSpecs:
      properties:
        name:
          type: string
        schemas:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpecValid"
      example:
        name: "trades"
        schemas:
          - valid_from: "2020-01-01"
            fields:
              - name: "Isin"
                type: "String"
                query: "mandatory"
              - name: "Symbol"
                type: "String"
              - name: "Date"
                type: "String"
              - name: "SecurityType"
                type: "String"
              - name: "Currency"
                type: "String"
              - name: "ContractDate"
                type: "Integer"
              - name: "ContractType"
                type: "Integer"
              - name: "SettlementMethod"
                type: "String"
              - name: "StrikePrice"
                type: "Number"
              - name: "ExerciseStyle"
                type: "String"
              - name: "OptionType"
                type: "String"
              - name: "EntryTime"
                type: "Timestamp"
              - name: "Price"
                type: "Number"
              - name: "Size"
                type: "Number"
    DatasetResultsJson:
      properties:
        data:
          type: array
          items:
            type: object
      example:
        data:
          - [65851025,65851025,1.11895E12,10000.0,14,20200521,"XEUR",589]
          - [65501498,65501498,1.1758E12,10000.0,14,20200528,"XEUR",589]
          - [99422946,99422946,3.057E9,1.958E7,14,20200522,"XETR",52983]
          - [84087632,84087632,1.0639E12,10000.0,14,20200506,"XEUR",589]
    DatasetResultsCsv:
      type: string
      example:
        65851025,65851025,1.11895E12,10000.0,14,20200521,"XEUR",589
        65501498,65501498,1.1758E12,10000.0,14,20200528,"XEUR",589
        99422946,99422946,3.057E9,1.958E7,14,20200522,"XETR",52983
        84087632,84087632,1.0639E12,10000.0,14,20200506,"XEUR",589
    ProviderList:
      properties:
        providers:
          type: array
          items:
            $ref: "#/components/schemas/Provider"
      example:
        { providers: [ { "name": "dbag", "legal": "Deutsche Boerse AG" }, { "name": "eurex", "legal": "Eurex Frankfurt AG" } ] }
    Provider:
      properties:
        name:
          type: string
        legal:
          type: string
  responses:
    400:
      description: Bad request
      content:
        text/plain:
          schema:
            type: string
          example:
            "Bad request."
    401:
      description: Authorization failed
      content:
        text/plain:
          schema:
            type: string
          example:
            "Authorization error message."
    404:
      description: Not found
      content:
        text/plain:
          schema:
            type: string
          example:
            "Not found."
    500:
      description: Internal processing error
      content:
        text/plain:
          schema:
            type: string
          example:
            "Internal processing error."
    503:
      description: Service temporarily unavailable
      content:
        text/plain:
          schema:
            type: string
          example:
            "Service temporarily unavailable."
security:
  - bearerAuth: []
