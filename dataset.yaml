openapi: "3.0.0"
info:
  title: A7 Analytics Platform - Customer's Dataset API
  description: >
    A7 Analytics Platform for the main T7 trading venues of Deutsche Börse Group.
    The platform enables clients to perform pre/at/post trade analysis and to interact with market data and analytics.It provides clients access to the most granular un-normalized/genuine historical order book data (EOBI) as well as constructed order books, off-the-shelf analytics and allows them to build their own custom analytics utilizing algo functionality, which is a flexible high-performance framework based on historical order book data (EOBI)
    across all T7 exchanges (Eurex, Xetra, etc.).<br/><br/>
    The A7 data can be accessed either via the <a href="https://a7.deutsche-boerse.com/">user interface</a> or via RESTful API.</br></br>
    
    The dataset API provides access to the datasets generated by customer's precalc jobs. With the API it it is possible to view and delete datasets. All available endpoints are described in detail below.<br/><br/>
    
    <b>Security measures:</b></br>
    In order to prevent unauthorized access to the API an authentication token must be used. A7 utilises the bearer authentication scheme for this purpose. The authentication token must be added to the header of each request message. Depending on the implementation it might be necessary to add the keyword "Bearer" to the token string as a prefix followed by a space.</br></br>
    A token can be generated at the <a href="https://a7.deutsche-boerse.com/">A7 user interface</a>. After login the user has to click on the user icon in the upper right corner, click on <b>API token generation</b> and finally click on <b>Request API key</b>. The generated token will be displayed directly in the user interface.<br/><br/>

  contact:
    name: Deutsche Börse Data & Analytics
    url: https://www.mds.deutsche-boerse.com
    email: analytics@deutsche-boerse.com
  version: 1.0.3
servers:
  - url: /api/v1
    description: A7 production environment

paths:
  /dataset:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve list of dataset owners"
      description: >
        The request delivers the list of owners the user has permission to access.<br/>
        If the mode parameter is set to `detailed`, the request also returns a list of the datasets assigned to each owner.
      operationId: "getOwners"
      parameters:
        - $ref: "#/components/parameters/mode"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/OwnerList"
                  - $ref: "#/components/schemas/OwnerTablesList" 
  
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
  /dataset/{owner}:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve list of available datasets"
      description: "The request delivers all available datasets assigned to the given owner."
      operationId: "getAvailableDatasets"
      parameters:
        - $ref: "#/components/parameters/owner"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Datasets"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "422":
          $ref: "#/components/responses/422"
  /dataset/{owner}/{dataset}:
    get:
      tags:
        - "Dataset API"
      summary: "Retrieve specification (schema) of given dataset"
      description: "The request delivers the specification of the given dataset."
      operationId: "getDatasetSpecs"
      parameters:
        - $ref: "#/components/parameters/owner"
        - $ref: "#/components/parameters/dataset"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetSpecs'
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
    delete:
      tags:
        - "Dataset API"
      summary: "Delete dataset"
      description: "The request deletes the given dataset."
      operationId: "deleteDataset"
      parameters:
        - $ref: "#/components/parameters/owner"
        - $ref: "#/components/parameters/dataset"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: string
                  message:
                    type: string
                required:
                  - success
                  - message
              example:
                success: "true"
                message: "Success message"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
          
  /dataset/{owner}/{dataset}/data:
    get:
      tags:
        - "Dataset API"
      summary: "Query result of given dataset"
      description: "The request delivers the results of the given dataset."
      operationId: "getDatasetResults"
      parameters:
        - $ref: "#/components/parameters/owner"
        - $ref: "#/components/parameters/dataset"
        - $ref: "#/components/parameters/select"
        - $ref: "#/components/parameters/where"
        - $ref: "#/components/parameters/orderBy"
        - $ref: "#/components/parameters/format"
        - $ref: "#/components/parameters/limit"
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatasetResultsWithMeta'
            text/csv:
              schema:
                $ref: "#/components/schemas/DatasetResults"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    owner:
      name: "owner"
      in: "path"
      description: "User identifier code"
      example: "Owner1"
      required: true
      schema:
        type: "string"
    dataset:
      name: "dataset"
      in: "path"
      description: "Name of the dataset"
      example: "TRADES"
      required: true
      schema:
        type: "string"
    select:
      name: "select"
      in: "query"
      description: "Defines the fields which will be included in the result data.<br/>
        Multiple fields have to be separated by comma.<br/>
        `*` can be used to select all fields availale in the dataset.<br/>"
        
      example: "MarketSegmentID,Currency"
      schema:
        type: "string"
        default: "*"
    where:
      name: "where"
      in: "query"
      description: >
        Defines criteria to filter the result data.<br>
        The following rules apply:
          - `Parameter=value` filters for data which contains a specific value for the given parameter<br>
            <b>Example:</b> MarketSegmentID=1210<br><br>
          - `Parameter!=value` filters for data which does NOT contain the specified value for the given parameter<br>
            <b>Example:</b> marketSegmentId!=1210<br><br>
          - `Parameter<value` filters for data which contains values smaller than the specified value for the given parameter<br>
            <b>Example:</b> price<1000<br><br>
          - `Parameter<=value` filters for data which contains values smaller than or equal to the specified value for the given parameter<br>
            <b>Example:</b> price<=1000<br><br> 
          - `Parameter>value` filters for data which contains values larger than the specified value for the given parameter<br>
            <b>Example:</b> price>1000<br><br>
          - `Parameter>=value` filters for data which contains values larger than or equal to the specified value for the given parameter<br>
            <b>Example:</b> price>=1000<br><br>            
          - `Parameter in(value1,value2,...)` filters for data which contains at least one of the specified values for the given parameter<br>
            <b>Example:</b> marketSegmentId in(1210,1211,1213)<br><br>
          - `&&` combines multiple filter criteria with a logical AND<br>
            <b>Example:</b> marketSegmentId=1210&&securityId=6565671 <br><br>
          - `||` combines multiple filter criteria with a logical OR<br>
            <b>Example:</b> marketSegmentId=1210||securityId=6565671<br><br>
          - `()` manipulates the order in which parameters combined with AND/OR are evaluated<br>
            <b>Example:</b> (marketSegmentId=1210&&securityId!=6565671)||(marketsegmentId in(1210,589)&&cuerrency!=EUR)<br>
            
        <b>Depending on the implementation it may be necessary to use URL encoding for special characters. In this case please use the respective codes (e.g. %27) instead of the characters.</b>
      schema:
        type: "string"
        example: "MarketSegmentID=1210"
    orderBy:
      name: "orderBy"
      in: "query"
      required: false
      description: >
        Defines the fields and the order the result will be sorted by. <br/>
        Multiple fields have to be separated by comma. <br/>
        ASC/DESC must be added to define the sort order.
      example: "MarketSegmentID,SecurityID ASC"
      schema:
        type: "string"
    format:
      name: "format"
      in: "query"
      description: "Defines the format of the response."
      schema:
        type: "string"
        enum: ["csv", "json"]
        default: "json"
    limit:
      name: "limit"
      in: "query"
      description: "Limit the number of elements in the response (null = 1000). Max value is 10000."
      example: "100"
      schema:
        type: "string"
        default: null
    mode:
      name: "mode"
      in: "query"
      description: >
        Defines the level of detail for the output.<br/>
        Mode options:
          * `compact` (default) - Returns a list of owners
          * `detailed` - Returns a list of owners and their respective datasets
      schema:
        type: string
        enum: [compact, detailed]
        default: compact

  schemas:
    Datasets:
      properties:
        datasets:
          type: array
          items:
            type: string
      example:
        datasets:
          - TRADES
          - DEPTH21
          - QUOTE_MINBYMIN
    FieldSpec:
      properties:
        name:
          type: string
        type:
          type: string
      example:
        name: "Market"
        type: "String"
    StatisticSpec:
      properties:
        numberOfRows:
          type: integer
          format: int64
        allocatedDiscSpace:
          type: string
      example:
        numberOfRows: 9998726
        allocatedDiscSpace: "20GB"
    DatasetSpecs:
      properties:
        name:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        partitionFields:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
        statistics:
          $ref: '#/components/schemas/StatisticSpec'
      example:
        name: "TRADES"
        fields:
          - name: "Market"
            type: "String"
          - name: "MarketSegmentID"
            type: "INTEGER"
          - name: "SecurityID"
            type: "Integer"
        partitionFields:
          - name: "Date"
            type: "DATE"
          - name: "Market"
            type: "String"
          - name: "MarketSegmentID"
            type: "INTEGER"
        statistics:
          numberOfRows: 9998726
          allocatedDiscSpace: "20GB"
    DatasetResultsWithMeta:
      properties:
        data:
          type: array
          items:
            type: object
        meta:
          type: array
          items:
            $ref: "#/components/schemas/FieldSpec"
      example:
        data:
          - [65851025,65851025,1.11895E12,10000.0,14,20200521,"XEUR",589]
          - [65501498,65501498,1.1758E12,10000.0,14,20200528,"XEUR",589]
          - [99422946,99422946,3.057E9,1.958E7,14,20200522,"XETR",52983]
          - [84087632,84087632,1.0639E12,10000.0,14,20200506,"XEUR",589]
        meta:
          - {"name":"date","type":"int"}
          - {"name":"time","type":"int"}
          - {"name":"price","type":"double"}
          - {"name":"quantity","type":"double"}
          - {"name":"tradeid","type":"int"}
          - {"name":"day","type":"int"}
          - {"name":"market","type":"string"}
          - {"name":"marketsegmentid","type":"int"}
    DatasetResults:
      properties:
        data:
          type: string
      example: | 
        market,price,marketsegmentid,day,ts
        XETR,77400,52105,20210127,1611734640138020461
        XETR,77550,52105,20210127,1611734640138484359
        XETR,77500,52105,20210127,1611734645905770626
        XETR,77450,52105,20210127,1611734647820975768

    OwnerList:
      properties:
        owners:
          type: array
          items:
            type: string
      example:
        { owners: [ "DBAG", "ClientA" ] }
    OwnerTablesList:
      properties:
        owners:
          type: array
          items:
            $ref: '#/components/schemas/OwnerTable'
      example:
        - owner: "DBAG"
          dataSets:
            - name: dataSet1,
              fields:
                - name: "time"
                  type: "bigint"
                - name: "volume"
                  type: "bigint"
              partitionFields:
                - name: "day"
                  type: "int"
                - name: "market"
                  type: "string"
              statistics:
            - name: dataSet2,
              fields:
                - name: "time"
                  type: "bigint"
                - name: "volume"
                  type: "bigint"
              partitionFields:
                - name: "day"
                  type: "int"
                - name: "market"
                  type: "string"
              statistics:
        - owner: "ClientA"
          dataSets:
            - name: dataSet3,
              fields:
                - name: "time"
                  type: "bigint"
                - name: "volume"
                  type: "bigint"
              partitionFields:
                - name: "day"
                  type: "int"
                - name: "market"
                  type: "string"
              statistics:
    OwnerTable:
      properties:
        owner:
          type: string
        dataSets:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              fields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
              partitionFields:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    type:
                      type: string
              statistics:
                type: array
                items:
                  type: object
    Error:
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  responses:
    400:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    401:
      description: Authorization failed
      content:
        text/plain:
          schema:
            type: string
          example:
            "Specific error message."
    403:
      description: Forbidden resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    422:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

security:
  - bearerAuth: []
